/******************************************************************************
 * Copyright 2013-2014 hicling Systems (MikeWang)
 *
 * FileName: json_test.c
 *
 * Description: The web server mode configration.
 *              Check your hardware connection with the host while use this mode.
 * Modification history:
 *     2015/6/30, v1.0 create this file.
*******************************************************************************/
#include<netdb.h>
#include<errno.h>
#include<sys/socket.h>
#include <sys/ipc.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <stdio.h>
#include <arpa/inet.h>
#include <string.h>
#include <unistd.h>
#include<fcntl.h>
#include<thread_db.h>
#include "internet.h"
#include "json_test.h"
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <assert.h>
#include <json.h>
#include <json_tokener.h>
#include "int_compnent.h"
/*********************************************************************
* MACROS
*/



/*********************************************************************
* TYPEDEFS
*/


/*********************************************************************
* GLOBAL VARIABLES
*/
/*set to 1 to open the key trigger function */

/*********************************************************************
* LOCAL VARIABLES
*/
/******************************************************************************
 * FunctionName : int  socket_recieved(void* env)
 * Description	:data recieved function after data sended
 * Parameters	: level : output level of pin
 * Returns		: 0: init successfully
 *				 -1: init failed
 *				
*******************************************************************************/
int get_mac(CLASS(int_comp) *arg, char *buffer, char *output_lenth) /*initiate http object*/
{
	
}



/******************************************************************************
 * FunctionName : int  socket_recieved(void* env)
 * Description  :data recieved function after data sended
 * Parameters   : level : output level of pin
 * Returns      : 0: init successfully
 *				 -1: init failed
 *				
*******************************************************************************/
int init_int_comp(CLASS(int_comp) *arg) /*initiate http object*/
{
	struct sockaddr_in *addr;
        struct ifreq ifr;
        char *name,*address;
        int sockfd;
        int i;
        if(argc != 2)
        {
                usage(argv[0]);
        }
        else
        {
                name = argv[1];
        }

        sockfd = socket(AF_INET,SOCK_DGRAM,0);

        strncpy(ifr.ifr_name,name,IFNAMSIZ-1);

        if(ioctl(sockfd,SIOCGIFADDR,&ifr) == -1)
                perror("ioctl error"),exit(1);
        addr = (struct sockaddr_in *)&(ifr.ifr_addr);
        address = inet_ntoa(addr->sin_addr);
        printf("inet addr: %s ",address);

        if(ioctl(sockfd,SIOCGIFBRDADDR,&ifr) == -1)
                perror("ioctl error"),exit(1);
        addr = (struct sockaddr_in *)&ifr.ifr_broadaddr;
        address = inet_ntoa(addr->sin_addr);
        printf("broad addr: %s ",address);

        if(ioctl(sockfd,SIOCGIFNETMASK,&ifr) == -1)
                perror("ioctl error"),exit(1);
        addr = (struct sockaddr_in *)&ifr.ifr_addr;
        address = inet_ntoa(addr->sin_addr);
        printf("inet mask: %s ",address);
        printf("\n");

        if(ioctl(sockfd, SIOCGIFHWADDR, &ifr) == -1)
                perror("ioctl error"), exit(1);
        unsigned char * mac = (unsigned char *)ifr.ifr_hwaddr.sa_data;
        for(i=0;i<6;i++)
                printf("%02x:",mac[i]);
        printf("\n");

        exit(0);


}




